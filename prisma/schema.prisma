datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  products      Product[]
  clients       Client[]
  suppliers     Supplier[]
  categories    Category[]
  invoices      Invoice[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  zipCode   String?
  city      String?
  country   String?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Supplier {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, userId])
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Float
  sku          String?       @unique
  inStock      Int           @default(0)
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  supplier     Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId   String?
  Category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   String?
  invoiceItems InvoiceItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  date        DateTime
  dueDate     DateTime
  status      InvoiceStatus @default(DRAFT)
  subtotal    Float
  tax         Float
  total       Float
  notes       String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  items       InvoiceItem[]
  pdfVersions InvoicePDF[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model InvoicePDF {
  id        String   @id @default(cuid())
  url       String
  notes     String?
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  invoiceId String
  productId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}
